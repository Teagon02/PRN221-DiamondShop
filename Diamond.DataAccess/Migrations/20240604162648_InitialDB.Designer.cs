// <auto-generated />
using System;
using Diamond.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diamond.DataAccess.Migrations
{
    [DbContext(typeof(DiamondDbContext))]
    [Migration("20240604162648_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Diamond.DataAccess.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Nhẫn kim cương",
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6076),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6084),
                            Description = "Description"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Bông tai kim cương",
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6087),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6087),
                            Description = "Description"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Lắc/Vòng tay kim cương",
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6088),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6089),
                            Description = "Description"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Mặt dây chuyền kim cương",
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6089),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6090),
                            Description = "Description"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Bộ trang sức kim cương",
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6090),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6091),
                            Description = "Description"
                        });
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoldKarat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoldWeight")
                        .HasColumnType("float");

                    b.Property<string>("MainStoneSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SideStoneQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SideStoneType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SideStoneWeight")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6251),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6251),
                            Description = "Đây là mô tả",
                            GoldKarat = "18K",
                            GoldType = "Vàng trắng",
                            GoldWeight = 1.1799999999999999,
                            MainStoneSize = "Round 5ly",
                            Name = "BÔNG TAI KIM CƯƠNG 18K ERA00100",
                            Price = 33000000.0,
                            SideStoneQuantity = 124,
                            SideStoneType = "Kim cương",
                            SideStoneWeight = 0.75,
                            Status = true
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6254),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6254),
                            Description = "Đây là mô tả",
                            GoldKarat = "18K",
                            GoldType = "Vàng trắng",
                            GoldWeight = 0.84999999999999998,
                            MainStoneSize = "Round 5ly",
                            Name = "NHẪN KIM CƯƠNG NỮ 18K 01141N",
                            Price = 44000000.0,
                            SideStoneQuantity = 19,
                            SideStoneType = "Kim cương",
                            SideStoneWeight = 0.20000000000000001,
                            Status = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 4,
                            DateCreated = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6256),
                            DateModified = new DateTime(2024, 6, 4, 23, 26, 48, 524, DateTimeKind.Local).AddTicks(6256),
                            Description = "Đây là mô tả",
                            GoldKarat = "18K",
                            GoldType = "Vàng trắng",
                            GoldWeight = 0.53000000000000003,
                            MainStoneSize = "Round 5ly",
                            Name = "MẶT DÂY CHUYỀN KIM CƯƠNG 18K",
                            Price = 55000000.0,
                            SideStoneQuantity = 24,
                            SideStoneType = "Kim cương",
                            SideStoneWeight = 1.05,
                            Status = true
                        });
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Image", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Inventory", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Order", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.OrderItem", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diamond.DataAccess.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Payment", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Product", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.UserRole", b =>
                {
                    b.HasOne("Diamond.DataAccess.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diamond.DataAccess.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Diamond.DataAccess.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
